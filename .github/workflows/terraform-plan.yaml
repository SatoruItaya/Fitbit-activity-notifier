name: terraform-plan
on:
  pull_request:
    branches:
      - main

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: terraform
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Detect Terraform Version
        run: |
          printf "TF_VERSION=%s" $(cat .terraform-version) >> $GITHUB_ENV
      - uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::286984104046:role/${{ secrets.ROLE_NAME }}
          aws-region: ap-northeast-1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config='bucket=${{ secrets.TFSTATE_BUCKET }}' \
          -backend-config='key=Fitbit-Activity-Notifier/terraform.tfstate' \
          -backend-config='region=ap-northeast-1'
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color \
          -var='fitbit_refresh_cb_bucket_name=${{ secrets.FITBIT_REFRESH_CB_BUCKET_NAME }}' \
          -var='fitbit_start_date_of_use=2016-09-19' \
          -var='lambda_function_name=fitbit-activity-notifier' \
          -var='deployment_package_bucket=${{ secrets.DEPLOYMENT_PACKAGE_BUCKET }}' \
          -var='deployment_package_key=fitbit-activity-notifier/lambda.zip'
      - uses: actions/github-script@v6.2.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
